DONE:
- setup project by run npm init
- add pm/history.txt for project management purpose

- setup git and add first commit

- add eslint and config

- connected to mlab database
note about mongodb://<dbuser>:<dbpassword>@ds261138.mlab.com:61138/amazonclone
here *dbuser* need to be created on user tab on selected db, 
this is not *account* used to login to mlab itself.

- Schema.pre must has a function style cb not arrow function because 
of fat arrow lexically binds the function to current scope so *this*
will not be *Schema* instance

-// cookie-parser, express-session, express-flash
- both cookie and session are place to store data
- cookie store data on client side, thus can be accessed by user
  - cookie is sent by browser to server each request
  - cookie-parser is used to parser that cookie
- session store data on server side, thus cannot be accessed by user
  - server identify user using a session id (session.sid)
  - session.sid is stored in cookie (signed or unsinged)
  - because cookie is sent by browser to server each request, 
  server will get session.sid from cookie to identify user from session
  - express-session is used to handle above steps
- flash using exppres-session to pass message from route to route

-// passport work follow
- route use passport.authenticate('local-login')
- if user authen successfully, user object shall be passed to passport return done(null, user);
passport will then call passport.serializeUser to get which information should
be saved into *session* (here user._id)
- then on another route passport get that saved info and give to passport.deserializeUser
and the *req.user* shall be assiged to *user* got from done(err, user); in 
deserializeUser function

-// fixed issue related to session sometime cannot be saved before redirecting
- for example when user login succesfully we redirect his/her to his/her profile page.
on that route we check for *req.user* which should be set by passport.
- but there is some cases when user login succesfully we call redirect, and redirecting
happened before *session*, which has user info from passport.serializeUser, be saved.
thus, on *profile* route passport cannot get user info back from session and thus
cannot call passport.deserializeUser and cannot set *req.user*
- because *req.user* is not set, request shall be redirect to login page again.
- FIX (this is temporary, should check more)
(comment return writetop(); and add return;): node_modules/express-session/index.js
    if (shouldSave(req)) {
      req.session.save(function onsave(err) {
        if (err) {
          defer(next, err);
        }

        writeend();
      });

      // return writetop();
      return;

TODO:
